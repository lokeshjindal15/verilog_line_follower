
module uart_recv_DW01_inc_0 ( A, SUM );
  input [11:0] A;
  output [11:0] SUM;

  wire   [11:2] carry;

  HA1D0BWP U1_1_10 ( .A(A[10]), .B(carry[10]), .CO(carry[11]), .S(SUM[10]) );
  HA1D0BWP U1_1_9 ( .A(A[9]), .B(carry[9]), .CO(carry[10]), .S(SUM[9]) );
  HA1D0BWP U1_1_2 ( .A(A[2]), .B(carry[2]), .CO(carry[3]), .S(SUM[2]) );
  HA1D0BWP U1_1_7 ( .A(A[7]), .B(carry[7]), .CO(carry[8]), .S(SUM[7]) );
  HA1D0BWP U1_1_4 ( .A(A[4]), .B(carry[4]), .CO(carry[5]), .S(SUM[4]) );
  HA1D0BWP U1_1_8 ( .A(A[8]), .B(carry[8]), .CO(carry[9]), .S(SUM[8]) );
  HA1D0BWP U1_1_5 ( .A(A[5]), .B(carry[5]), .CO(carry[6]), .S(SUM[5]) );
  HA1D0BWP U1_1_6 ( .A(A[6]), .B(carry[6]), .CO(carry[7]), .S(SUM[6]) );
  HA1D0BWP U1_1_3 ( .A(A[3]), .B(carry[3]), .CO(carry[4]), .S(SUM[3]) );
  HA1D0BWP U1_1_1 ( .A(A[1]), .B(A[0]), .CO(carry[2]), .S(SUM[1]) );
  CKXOR2D0BWP U1 ( .A1(carry[11]), .A2(A[11]), .Z(SUM[11]) );
  CKND0BWP U2 ( .I(A[0]), .ZN(SUM[0]) );
endmodule


module uart_recv ( clk, rst_n, clr_rdy, RX, rdy, cmd );
  output [7:0] cmd;
  input clk, rst_n, clr_rdy, RX;
  output rdy;
  wire   n110, rx1, rx_flop, N14, N15, N16, N17, N18, N19, N20, N21, N22, N23,
         N24, N25, n1, n18, n25, n26, n27, n28, n29, n30, n31, n32, n33, n34,
         n35, n36, n37, n38, n39, n40, n41, n42, n43, n44, n45, n46, n47, n48,
         n49, n50, n51, n52, n53, n54, n55, n56, n57, n58, n59, n60, n61, n63,
         n65, n67, n69, n71, n73, n75, n77, n78, n79, n80, n81, n82, n83, n84,
         n86, n87, n88, n89, n90, n91, n92, n93, n94, n95, n96, n97, n98, n99,
         n100, n101, n102, n103, n104, n105, n106, n107, n108, n109;
  wire   [11:0] baud_cnt;
  wire   [3:0] bit_cnt;
  wire   [1:0] state;
  wire   [1:0] nxt_state;

  DFCNQD1BWP \state_reg[1]  ( .D(nxt_state[1]), .CP(clk), .CDN(rst_n), .Q(
        state[1]) );
  DFCNQD1BWP rdy_reg ( .D(n44), .CP(clk), .CDN(rst_n), .Q(n110) );
  AO32D1BWP U8 ( .A1(bit_cnt[1]), .A2(n109), .A3(n32), .B1(n31), .B2(
        bit_cnt[2]), .Z(n46) );
  OA21D1BWP U12 ( .A1(bit_cnt[0]), .A2(n90), .B(n34), .Z(n33) );
  IND3D4BWP U28 ( .A1(n87), .B1(n89), .B2(n91), .ZN(n37) );
  ND4D2BWP U32 ( .A1(baud_cnt[3]), .A2(baud_cnt[1]), .A3(baud_cnt[5]), .A4(n40), .ZN(n35) );
  uart_recv_DW01_inc_0 add_51 ( .A(baud_cnt), .SUM({N25, N24, N23, N22, N21, 
        N20, N19, N18, N17, N16, N15, N14}) );
  DFSNQD1BWP rx_flop_reg ( .D(rx1), .CP(clk), .SDN(rst_n), .Q(rx_flop) );
  DFD1BWP \bit_cnt_reg[3]  ( .D(n45), .CP(clk), .QN(n18) );
  DFSNQD1BWP rx1_reg ( .D(RX), .CP(clk), .SDN(rst_n), .Q(rx1) );
  DFCND1BWP \state_reg[0]  ( .D(nxt_state[0]), .CP(clk), .CDN(rst_n), .Q(
        state[0]), .QN(n93) );
  EDFCNQD1BWP \shift_cmd_reg[8]  ( .D(rx_flop), .E(n27), .CP(clk), .CDN(rst_n), 
        .Q(n1) );
  EDFCNQD1BWP \shift_cmd_reg[1]  ( .D(cmd[2]), .E(n86), .CP(clk), .CDN(rst_n), 
        .Q(n83) );
  EDFCND1BWP \shift_cmd_reg[0]  ( .D(cmd[1]), .E(n27), .CP(clk), .CDN(rst_n), 
        .QN(n75) );
  DFD1BWP \bit_cnt_reg[0]  ( .D(n48), .CP(clk), .Q(bit_cnt[0]), .QN(n107) );
  DFD1BWP \bit_cnt_reg[1]  ( .D(n47), .CP(clk), .Q(bit_cnt[1]), .QN(n108) );
  DFD1BWP \bit_cnt_reg[2]  ( .D(n46), .CP(clk), .Q(bit_cnt[2]), .QN(n109) );
  DFD1BWP \baud_cnt_reg[7]  ( .D(n52), .CP(clk), .Q(baud_cnt[7]), .QN(n103) );
  DFD1BWP \baud_cnt_reg[4]  ( .D(n55), .CP(clk), .Q(baud_cnt[4]), .QN(n100) );
  DFD1BWP \baud_cnt_reg[2]  ( .D(n57), .CP(clk), .Q(baud_cnt[2]), .QN(n98) );
  DFD1BWP \baud_cnt_reg[11]  ( .D(n60), .CP(clk), .Q(baud_cnt[11]), .QN(n95)
         );
  DFD1BWP \baud_cnt_reg[10]  ( .D(n49), .CP(clk), .Q(baud_cnt[10]), .QN(n106)
         );
  DFD1BWP \baud_cnt_reg[9]  ( .D(n50), .CP(clk), .Q(baud_cnt[9]), .QN(n105) );
  DFD1BWP \baud_cnt_reg[8]  ( .D(n51), .CP(clk), .Q(baud_cnt[8]), .QN(n104) );
  DFD1BWP \baud_cnt_reg[6]  ( .D(n53), .CP(clk), .Q(baud_cnt[6]), .QN(n102) );
  DFD1BWP \baud_cnt_reg[5]  ( .D(n54), .CP(clk), .Q(baud_cnt[5]), .QN(n101) );
  DFD1BWP \baud_cnt_reg[3]  ( .D(n56), .CP(clk), .Q(baud_cnt[3]), .QN(n99) );
  DFD1BWP \baud_cnt_reg[1]  ( .D(n58), .CP(clk), .Q(baud_cnt[1]), .QN(n97) );
  DFD1BWP \baud_cnt_reg[0]  ( .D(n59), .CP(clk), .Q(baud_cnt[0]), .QN(n96) );
  EDFCNQD4BWP \shift_cmd_reg[7]  ( .D(n1), .E(n27), .CP(clk), .CDN(rst_n), .Q(
        n77) );
  EDFCNQD1BWP \shift_cmd_reg[2]  ( .D(cmd[3]), .E(n86), .CP(clk), .CDN(rst_n), 
        .Q(n82) );
  EDFCNQD1BWP \shift_cmd_reg[3]  ( .D(cmd[4]), .E(n86), .CP(clk), .CDN(rst_n), 
        .Q(n81) );
  EDFCNQD1BWP \shift_cmd_reg[4]  ( .D(cmd[5]), .E(n86), .CP(clk), .CDN(rst_n), 
        .Q(n80) );
  EDFCNQD1BWP \shift_cmd_reg[5]  ( .D(cmd[6]), .E(n86), .CP(clk), .CDN(rst_n), 
        .Q(n79) );
  EDFCNQD1BWP \shift_cmd_reg[6]  ( .D(cmd[7]), .E(n86), .CP(clk), .CDN(rst_n), 
        .Q(n78) );
  ND4D1BWP U63 ( .A1(baud_cnt[11]), .A2(baud_cnt[0]), .A3(baud_cnt[9]), .A4(
        n43), .ZN(n41) );
  ND4D1BWP U64 ( .A1(baud_cnt[6]), .A2(baud_cnt[10]), .A3(baud_cnt[8]), .A4(
        n42), .ZN(n39) );
  CKND0BWP U65 ( .I(n77), .ZN(n61) );
  CKND12BWP U66 ( .I(n61), .ZN(cmd[7]) );
  CKND0BWP U67 ( .I(n78), .ZN(n63) );
  CKND12BWP U68 ( .I(n63), .ZN(cmd[6]) );
  CKND0BWP U69 ( .I(n79), .ZN(n65) );
  CKND12BWP U70 ( .I(n65), .ZN(cmd[5]) );
  CKND0BWP U71 ( .I(n80), .ZN(n67) );
  CKND12BWP U72 ( .I(n67), .ZN(cmd[4]) );
  CKND0BWP U73 ( .I(n81), .ZN(n69) );
  CKND12BWP U74 ( .I(n69), .ZN(cmd[3]) );
  CKND0BWP U75 ( .I(n82), .ZN(n71) );
  CKND12BWP U76 ( .I(n71), .ZN(cmd[2]) );
  CKND0BWP U77 ( .I(n83), .ZN(n73) );
  CKND12BWP U78 ( .I(n73), .ZN(cmd[1]) );
  CKND12BWP U79 ( .I(n75), .ZN(cmd[0]) );
  INVD1BWP U80 ( .I(n110), .ZN(n84) );
  CKND12BWP U81 ( .I(n84), .ZN(rdy) );
  AO33D0BWP U82 ( .A1(rdy), .A2(n88), .A3(n89), .B1(n26), .B2(n93), .B3(
        state[1]), .Z(n44) );
  NR4D0BWP U83 ( .A1(n18), .A2(n107), .A3(bit_cnt[1]), .A4(bit_cnt[2]), .ZN(
        n26) );
  NR3D0BWP U84 ( .A1(state[0]), .A2(state[1]), .A3(rx_flop), .ZN(n36) );
  INVD1BWP U85 ( .I(n86), .ZN(n91) );
  INVD1BWP U86 ( .I(n30), .ZN(n90) );
  ND2D1BWP U87 ( .A1(n89), .A2(n90), .ZN(n34) );
  INVD1BWP U88 ( .I(n36), .ZN(n89) );
  NR2XD0BWP U89 ( .A1(n35), .A2(n36), .ZN(n30) );
  INVD1BWP U90 ( .I(nxt_state[1]), .ZN(n92) );
  MOAI22D0BWP U91 ( .A1(n33), .A2(n108), .B1(n108), .B2(n32), .ZN(n47) );
  NR2XD0BWP U92 ( .A1(n90), .A2(n107), .ZN(n32) );
  CKBD2BWP U93 ( .I(n38), .Z(n87) );
  AOI21D1BWP U94 ( .A1(n92), .A2(n25), .B(n86), .ZN(n38) );
  CKBD2BWP U95 ( .I(n27), .Z(n86) );
  OAI21D1BWP U96 ( .A1(n92), .A2(n35), .B(n39), .ZN(n27) );
  ND2D1BWP U97 ( .A1(n89), .A2(n25), .ZN(nxt_state[0]) );
  OAI33D4BWP U98 ( .A1(n93), .A2(state[1]), .A3(n39), .B1(n94), .B2(state[0]), 
        .B3(n26), .ZN(nxt_state[1]) );
  INVD1BWP U99 ( .I(clr_rdy), .ZN(n88) );
  NR4D0BWP U100 ( .A1(baud_cnt[8]), .A2(baud_cnt[6]), .A3(baud_cnt[10]), .A4(
        n41), .ZN(n40) );
  OAI32D1BWP U101 ( .A1(n28), .A2(n108), .A3(n109), .B1(n29), .B2(n18), .ZN(
        n45) );
  ND2D1BWP U102 ( .A1(n32), .A2(n18), .ZN(n28) );
  AOI21D1BWP U103 ( .A1(n30), .A2(n109), .B(n31), .ZN(n29) );
  MOAI22D0BWP U104 ( .A1(n37), .A2(n103), .B1(N21), .B2(n87), .ZN(n52) );
  MOAI22D0BWP U105 ( .A1(n37), .A2(n100), .B1(N18), .B2(n87), .ZN(n55) );
  MOAI22D0BWP U106 ( .A1(n37), .A2(n98), .B1(N16), .B2(n87), .ZN(n57) );
  NR4D0BWP U107 ( .A1(baud_cnt[5]), .A2(baud_cnt[3]), .A3(baud_cnt[1]), .A4(
        n41), .ZN(n42) );
  MOAI22D0BWP U108 ( .A1(n106), .A2(n37), .B1(N24), .B2(n87), .ZN(n49) );
  MOAI22D0BWP U109 ( .A1(n105), .A2(n37), .B1(N23), .B2(n87), .ZN(n50) );
  MOAI22D0BWP U110 ( .A1(n104), .A2(n37), .B1(N22), .B2(n87), .ZN(n51) );
  MOAI22D0BWP U111 ( .A1(n102), .A2(n37), .B1(N20), .B2(n87), .ZN(n53) );
  MOAI22D0BWP U112 ( .A1(n101), .A2(n37), .B1(N19), .B2(n87), .ZN(n54) );
  MOAI22D0BWP U113 ( .A1(n99), .A2(n37), .B1(N17), .B2(n87), .ZN(n56) );
  MOAI22D0BWP U114 ( .A1(n97), .A2(n37), .B1(N15), .B2(n87), .ZN(n58) );
  MOAI22D0BWP U115 ( .A1(n96), .A2(n37), .B1(N14), .B2(n87), .ZN(n59) );
  MOAI22D0BWP U116 ( .A1(n95), .A2(n37), .B1(N25), .B2(n87), .ZN(n60) );
  ND3D1BWP U117 ( .A1(n39), .A2(n94), .A3(state[0]), .ZN(n25) );
  OAI22D1BWP U118 ( .A1(n107), .A2(n34), .B1(bit_cnt[0]), .B2(n90), .ZN(n48)
         );
  OAI21D1BWP U119 ( .A1(bit_cnt[1]), .A2(n90), .B(n33), .ZN(n31) );
  NR3D0BWP U120 ( .A1(baud_cnt[2]), .A2(baud_cnt[7]), .A3(baud_cnt[4]), .ZN(
        n43) );
  INVD1BWP U121 ( .I(state[1]), .ZN(n94) );
endmodule

