
module UART_rx_DW01_inc_0 ( A, SUM );
  input [11:0] A;
  output [11:0] SUM;

  wire   [11:2] carry;

  HA1D0BWP U1_1_10 ( .A(A[10]), .B(carry[10]), .CO(carry[11]), .S(SUM[10]) );
  HA1D0BWP U1_1_1 ( .A(A[1]), .B(A[0]), .CO(carry[2]), .S(SUM[1]) );
  HA1D0BWP U1_1_3 ( .A(A[3]), .B(carry[3]), .CO(carry[4]), .S(SUM[3]) );
  HA1D0BWP U1_1_6 ( .A(A[6]), .B(carry[6]), .CO(carry[7]), .S(SUM[6]) );
  HA1D0BWP U1_1_7 ( .A(A[7]), .B(carry[7]), .CO(carry[8]), .S(SUM[7]) );
  HA1D0BWP U1_1_9 ( .A(A[9]), .B(carry[9]), .CO(carry[10]), .S(SUM[9]) );
  HA1D0BWP U1_1_5 ( .A(A[5]), .B(carry[5]), .CO(carry[6]), .S(SUM[5]) );
  HA1D0BWP U1_1_8 ( .A(A[8]), .B(carry[8]), .CO(carry[9]), .S(SUM[8]) );
  HA1D0BWP U1_1_2 ( .A(A[2]), .B(carry[2]), .CO(carry[3]), .S(SUM[2]) );
  HA1D0BWP U1_1_4 ( .A(A[4]), .B(carry[4]), .CO(carry[5]), .S(SUM[4]) );
  CKXOR2D0BWP U1 ( .A1(carry[11]), .A2(A[11]), .Z(SUM[11]) );
  CKND0BWP U2 ( .I(A[0]), .ZN(SUM[0]) );
endmodule


module UART_rx ( clk, rst_n, RX, cmd, rdy, clr_rdy );
  output [7:0] cmd;
  input clk, rst_n, RX, clr_rdy;
  output rdy;
  wire   n105, n106, n107, n108, n109, n110, n111, n112, n113, N13, N14, N15,
         N16, N17, N18, N19, N20, N21, N22, N23, N24, \rx_shift_reg[8] , RXsyn,
         dff, n23, n24, n25, n26, n27, n28, n29, n30, n31, n32, n33, n34, n35,
         n36, n37, n38, n39, n40, n41, n42, n43, n44, n45, n46, n47, n48, n49,
         n50, n51, n52, n53, n54, n55, n56, n57, n58, n59, n60, n61, n62, n63,
         n64, n65, n67, n69, n71, n73, n75, n77, n79, n82, n83, n84, n85, n86,
         n87, n88, n89, n90, n91, n92, n93, n94, n95, n96, n97, n98, n99, n100,
         n101, n102, n103, n104;
  wire   [11:0] baud_cnt;
  wire   [3:0] bit_cnt;
  wire   [1:0] next_state;
  wire   [1:0] state;

  DFCNQD1BWP \baud_cnt_reg[11]  ( .D(n64), .CP(clk), .CDN(rst_n), .Q(
        baud_cnt[11]) );
  DFCNQD1BWP \baud_cnt_reg[0]  ( .D(n63), .CP(clk), .CDN(rst_n), .Q(
        baud_cnt[0]) );
  DFCNQD1BWP \baud_cnt_reg[1]  ( .D(n62), .CP(clk), .CDN(rst_n), .Q(
        baud_cnt[1]) );
  DFCNQD1BWP \baud_cnt_reg[2]  ( .D(n61), .CP(clk), .CDN(rst_n), .Q(
        baud_cnt[2]) );
  DFCNQD1BWP \baud_cnt_reg[3]  ( .D(n60), .CP(clk), .CDN(rst_n), .Q(
        baud_cnt[3]) );
  DFCNQD1BWP \baud_cnt_reg[4]  ( .D(n59), .CP(clk), .CDN(rst_n), .Q(
        baud_cnt[4]) );
  DFCNQD1BWP \baud_cnt_reg[5]  ( .D(n58), .CP(clk), .CDN(rst_n), .Q(
        baud_cnt[5]) );
  DFCNQD1BWP \baud_cnt_reg[6]  ( .D(n57), .CP(clk), .CDN(rst_n), .Q(
        baud_cnt[6]) );
  DFCNQD1BWP \baud_cnt_reg[7]  ( .D(n56), .CP(clk), .CDN(rst_n), .Q(
        baud_cnt[7]) );
  DFCNQD1BWP \baud_cnt_reg[8]  ( .D(n55), .CP(clk), .CDN(rst_n), .Q(
        baud_cnt[8]) );
  DFCNQD1BWP \baud_cnt_reg[9]  ( .D(n54), .CP(clk), .CDN(rst_n), .Q(
        baud_cnt[9]) );
  DFCNQD1BWP \baud_cnt_reg[10]  ( .D(n53), .CP(clk), .CDN(rst_n), .Q(
        baud_cnt[10]) );
  DFCNQD1BWP \state_reg[1]  ( .D(next_state[1]), .CP(clk), .CDN(rst_n), .Q(
        state[1]) );
  DFCNQD1BWP rdy_reg ( .D(n48), .CP(clk), .CDN(rst_n), .Q(n113) );
  OA21D1BWP U7 ( .A1(n30), .A2(bit_cnt[2]), .B(n31), .Z(n29) );
  OA21D1BWP U10 ( .A1(bit_cnt[1]), .A2(n30), .B(n33), .Z(n31) );
  OA21D1BWP U13 ( .A1(bit_cnt[0]), .A2(n30), .B(n34), .Z(n33) );
  IND3D4BWP U29 ( .A1(n82), .B1(n38), .B2(n35), .ZN(n36) );
  INR3D1BWP U31 ( .A1(n39), .B1(n40), .B2(RXsyn), .ZN(n23) );
  UART_rx_DW01_inc_0 add_76 ( .A(baud_cnt), .SUM({N24, N23, N22, N21, N20, N19, 
        N18, N17, N16, N15, N14, N13}) );
  EDFCNQD1BWP \rx_shift_reg_reg[8]  ( .D(RXsyn), .E(n86), .CP(clk), .CDN(rst_n), .Q(\rx_shift_reg[8] ) );
  DFSNQD1BWP dff_reg ( .D(RX), .CP(clk), .SDN(rst_n), .Q(dff) );
  EDFCNQD1BWP \rx_shift_reg_reg[1]  ( .D(cmd[2]), .E(n86), .CP(clk), .CDN(
        rst_n), .Q(n111) );
  EDFCNQD1BWP \rx_shift_reg_reg[2]  ( .D(cmd[3]), .E(n86), .CP(clk), .CDN(
        rst_n), .Q(n110) );
  EDFCNQD1BWP \rx_shift_reg_reg[3]  ( .D(cmd[4]), .E(n86), .CP(clk), .CDN(
        rst_n), .Q(n109) );
  EDFCNQD1BWP \rx_shift_reg_reg[4]  ( .D(cmd[5]), .E(n86), .CP(clk), .CDN(
        rst_n), .Q(n108) );
  EDFCNQD1BWP \rx_shift_reg_reg[5]  ( .D(cmd[6]), .E(n86), .CP(clk), .CDN(
        rst_n), .Q(n107) );
  EDFCNQD1BWP \rx_shift_reg_reg[6]  ( .D(cmd[7]), .E(n86), .CP(clk), .CDN(
        rst_n), .Q(n106) );
  EDFCNQD1BWP \rx_shift_reg_reg[7]  ( .D(\rx_shift_reg[8] ), .E(n86), .CP(clk), 
        .CDN(rst_n), .Q(n105) );
  EDFCNQD1BWP \rx_shift_reg_reg[0]  ( .D(cmd[1]), .E(n86), .CP(clk), .CDN(
        rst_n), .Q(n112) );
  DFSND1BWP RXsyn_reg ( .D(dff), .CP(clk), .SDN(rst_n), .Q(RXsyn), .QN(n84) );
  DFD1BWP \bit_cnt_reg[0]  ( .D(n52), .CP(clk), .Q(bit_cnt[0]), .QN(n87) );
  DFD1BWP \bit_cnt_reg[1]  ( .D(n51), .CP(clk), .Q(bit_cnt[1]), .QN(n88) );
  DFD1BWP \bit_cnt_reg[2]  ( .D(n50), .CP(clk), .Q(bit_cnt[2]), .QN(n89) );
  DFD1BWP \bit_cnt_reg[3]  ( .D(n49), .CP(clk), .Q(bit_cnt[3]), .QN(n90) );
  DFCND1BWP \state_reg[0]  ( .D(next_state[0]), .CP(clk), .CDN(rst_n), .Q(
        state[0]), .QN(n102) );
  INR2D1BWP U69 ( .A1(n25), .B1(n23), .ZN(n35) );
  ND4D1BWP U70 ( .A1(n44), .A2(n101), .A3(n45), .A4(n46), .ZN(n38) );
  INVD1BWP U71 ( .I(n112), .ZN(n65) );
  CKND12BWP U72 ( .I(n65), .ZN(cmd[0]) );
  INVD1BWP U73 ( .I(n105), .ZN(n67) );
  CKND12BWP U74 ( .I(n67), .ZN(cmd[7]) );
  INVD1BWP U75 ( .I(n106), .ZN(n69) );
  CKND12BWP U76 ( .I(n69), .ZN(cmd[6]) );
  INVD1BWP U77 ( .I(n107), .ZN(n71) );
  CKND12BWP U78 ( .I(n71), .ZN(cmd[5]) );
  INVD1BWP U79 ( .I(n108), .ZN(n73) );
  CKND12BWP U80 ( .I(n73), .ZN(cmd[4]) );
  INVD1BWP U81 ( .I(n109), .ZN(n75) );
  CKND12BWP U82 ( .I(n75), .ZN(cmd[3]) );
  INVD1BWP U83 ( .I(n110), .ZN(n77) );
  CKND12BWP U84 ( .I(n77), .ZN(cmd[2]) );
  INVD1BWP U85 ( .I(n111), .ZN(n79) );
  CKND12BWP U86 ( .I(n79), .ZN(cmd[1]) );
  CKND12BWP U87 ( .I(n104), .ZN(rdy) );
  INVD1BWP U88 ( .I(n113), .ZN(n104) );
  OAI33D1BWP U89 ( .A1(n104), .A2(clr_rdy), .A3(n23), .B1(n27), .B2(state[0]), 
        .B3(n103), .ZN(n48) );
  ND2D1BWP U90 ( .A1(n86), .A2(n35), .ZN(n30) );
  ND2D1BWP U91 ( .A1(n35), .A2(n30), .ZN(n34) );
  INVD1BWP U92 ( .I(n32), .ZN(n83) );
  ND2D1BWP U93 ( .A1(n25), .A2(n26), .ZN(next_state[0]) );
  CKND2BWP U94 ( .I(n38), .ZN(n86) );
  MOAI22D0BWP U95 ( .A1(n101), .A2(n36), .B1(N23), .B2(n82), .ZN(n53) );
  MOAI22D0BWP U96 ( .A1(n100), .A2(n36), .B1(N22), .B2(n82), .ZN(n54) );
  MOAI22D0BWP U97 ( .A1(n96), .A2(n36), .B1(N18), .B2(n82), .ZN(n58) );
  MOAI22D0BWP U98 ( .A1(n94), .A2(n36), .B1(N16), .B2(n82), .ZN(n60) );
  MOAI22D0BWP U99 ( .A1(n92), .A2(n36), .B1(N14), .B2(n82), .ZN(n62) );
  ND3D1BWP U100 ( .A1(n40), .A2(n84), .A3(n39), .ZN(n26) );
  NR2XD0BWP U101 ( .A1(n30), .A2(n87), .ZN(n32) );
  ND3D1BWP U102 ( .A1(n102), .A2(n103), .A3(n84), .ZN(n25) );
  CKBD2BWP U103 ( .I(n37), .Z(n82) );
  AOI21D1BWP U104 ( .A1(n26), .A2(n24), .B(n86), .ZN(n37) );
  IND2D1BWP U105 ( .A1(n23), .B1(n24), .ZN(next_state[1]) );
  NR3D0BWP U106 ( .A1(baud_cnt[2]), .A2(baud_cnt[8]), .A3(baud_cnt[4]), .ZN(
        n45) );
  NR4D0BWP U107 ( .A1(n94), .A2(n47), .A3(n96), .A4(n100), .ZN(n46) );
  ND2D1BWP U108 ( .A1(baud_cnt[1]), .A2(baud_cnt[11]), .ZN(n47) );
  ND4D1BWP U109 ( .A1(bit_cnt[3]), .A2(bit_cnt[0]), .A3(n88), .A4(n89), .ZN(
        n27) );
  MOAI22D0BWP U110 ( .A1(n36), .A2(n98), .B1(N20), .B2(n82), .ZN(n56) );
  INVD1BWP U111 ( .I(baud_cnt[7]), .ZN(n98) );
  MOAI22D0BWP U112 ( .A1(n36), .A2(n97), .B1(N19), .B2(n82), .ZN(n57) );
  INVD1BWP U113 ( .I(baud_cnt[6]), .ZN(n97) );
  OAI32D1BWP U114 ( .A1(n28), .A2(n88), .A3(n89), .B1(n29), .B2(n90), .ZN(n49)
         );
  ND2D1BWP U115 ( .A1(n32), .A2(n90), .ZN(n28) );
  OAI32D1BWP U116 ( .A1(n88), .A2(bit_cnt[2]), .A3(n83), .B1(n31), .B2(n89), 
        .ZN(n50) );
  NR3D0BWP U117 ( .A1(baud_cnt[6]), .A2(baud_cnt[7]), .A3(n91), .ZN(n44) );
  MOAI22D0BWP U118 ( .A1(n99), .A2(n36), .B1(N21), .B2(n82), .ZN(n55) );
  INVD1BWP U119 ( .I(baud_cnt[8]), .ZN(n99) );
  MOAI22D0BWP U120 ( .A1(n95), .A2(n36), .B1(N17), .B2(n82), .ZN(n59) );
  INVD1BWP U121 ( .I(baud_cnt[4]), .ZN(n95) );
  MOAI22D0BWP U122 ( .A1(n93), .A2(n36), .B1(N15), .B2(n82), .ZN(n61) );
  INVD1BWP U123 ( .I(baud_cnt[2]), .ZN(n93) );
  MOAI22D0BWP U124 ( .A1(n91), .A2(n36), .B1(N13), .B2(n82), .ZN(n63) );
  MOAI22D0BWP U125 ( .A1(n85), .A2(n36), .B1(N24), .B2(n82), .ZN(n64) );
  ND3D1BWP U126 ( .A1(n27), .A2(n102), .A3(state[1]), .ZN(n24) );
  OAI22D1BWP U127 ( .A1(n87), .A2(n34), .B1(bit_cnt[0]), .B2(n30), .ZN(n52) );
  OAI22D1BWP U128 ( .A1(n33), .A2(n88), .B1(bit_cnt[1]), .B2(n83), .ZN(n51) );
  INVD1BWP U129 ( .I(state[1]), .ZN(n103) );
  NR2XD0BWP U130 ( .A1(n102), .A2(state[1]), .ZN(n39) );
  INVD1BWP U131 ( .I(baud_cnt[5]), .ZN(n96) );
  INVD1BWP U132 ( .I(baud_cnt[9]), .ZN(n100) );
  INVD1BWP U133 ( .I(baud_cnt[3]), .ZN(n94) );
  INVD1BWP U134 ( .I(baud_cnt[0]), .ZN(n91) );
  INVD1BWP U135 ( .I(baud_cnt[10]), .ZN(n101) );
  INVD1BWP U136 ( .I(baud_cnt[1]), .ZN(n92) );
  INVD1BWP U137 ( .I(baud_cnt[11]), .ZN(n85) );
  ND4D1BWP U138 ( .A1(baud_cnt[8]), .A2(baud_cnt[4]), .A3(n41), .A4(n42), .ZN(
        n40) );
  NR4D0BWP U139 ( .A1(n43), .A2(baud_cnt[3]), .A3(baud_cnt[9]), .A4(
        baud_cnt[5]), .ZN(n42) );
  AN3XD1BWP U140 ( .A1(n44), .A2(baud_cnt[2]), .A3(baud_cnt[10]), .Z(n41) );
  ND2D1BWP U141 ( .A1(n85), .A2(n92), .ZN(n43) );
endmodule

